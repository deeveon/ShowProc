//--------------------------------------------------------------------------------
// Shell/CLI text attributes
//--------------------------------------------------------------------------------
#define Bold         	"\033[0;1m"
#define BoldEnd      	"\033[0;22m"
#define Italic       	"\033[0;3m"
#define ItalicEnd    	"\033[0;23m"
#define Underline    	"\033[0;4m"
#define UnderlineEnd 	"\033[0;24m"



// Modes
typedef enum Mode { 
	MODE_ALL,
	MODE_CLI, 
	MODE_SYSTEM,
	MODE_WB
} Mode;

// #define TEMPLATE		"VER=VERSION/S,ALL/S,CLI/S,SYS=SYSTEM/S,WB=WORKBENCH/S," \
						"UP=UPTIME/S,F=FULL/S,TCB/S,S=SHORT/S," \
						"P=PROCESS/N,COM=COMMAND/K"

// #define OPT_WB				4			// Workbench processes only
// #define OPT_UPTIME			5			// Show system uptime

#define STR_WB_HEADING		"Workbench Processes"

#define STR_ERR_GET_WB_PROGS	"Error getting Workbench program list"


void 	PrintSystemUptime(void);
int 	PrintWorkbenchProcesses(OutFrmt format);



//================================================================================


	if (opts[OPT_WB])		*mode = MODE_WB;				// Workbench processes only



// Print system uptime unless the COMMAND argument was given
if (format != FORMAT_COMMAND)
	PrintSystemUptime();


//--------------------------------------------------------------------------------
//	Prints the amount of time the system has been running since last boot.
//--------------------------------------------------------------------------------
void PrintSystemUptime(void)
{
	// TODO: Replace with GetUptime() when available in OS 3.2+
	ULONG 	Days 	= 0,
			Hours 	= 0,
			Minutes = 0,
			Seconds = 0;

	// GetUptime(&Seconds);

	Minutes = Seconds / 60;
	Hours = Minutes / 60;
	Days = Hours / 24;

	Seconds %= 60;
	Minutes %= 60;
	Hours %= 24;

	Printf("\nSystem uptime: %lu days, %lu hours, %lu minutes, %lu seconds\n", Days, Hours, Minutes, Seconds);
}




// Print out Workbench processes
if (mode == MODE_ALL || mode == MODE_WB)
{
	rc = PrintWorkbenchProcesses(format);
	if (rc != RETURN_OK)
		goto exit;
}


//--------------------------------------------------------------------------------
//	Prints information about Workbench processes
//--------------------------------------------------------------------------------
int PrintWorkbenchProcesses(OutFrmt format)
{
	struct 	List* list = NULL;
	struct 	Node* node = NULL;
	struct 	Process* process = NULL;
	int 	taskCount = 1;
	int 	rc = RETURN_OK;

	*node = WorkbenchBase->lib_Node;
	Printf("%s\n", node->ln_Name);

	// Get the list of Workbench programs
	// TODO: This always fails. Why?
	if (WorkbenchControl(NULL, WBCTRLA_GetProgramList, &list, TAG_DONE)) {
		// Printf("%s\n", STR_ERR_GET_WB_PROGS);
		PrintFault(IoErr(), NULL);
		return RETURN_FAIL;
	}

	if (list == NULL) {
		// Printf("%s\n", STR_ERR_GET_WB_PROGS);
		Printf("%s - List is NULL\n", STR_ERR_GET_WB_PROGS);
		rc = RETURN_FAIL;
		goto exit;
	}

	// Print the workbench processes
	node = list->lh_Head;

	while (node->ln_Succ != NULL) 
	{
		// Print process information
		Printf(" %3.3ld", taskCount);
		Printf(" %-35.35s", ((struct Process*)node)->pr_Task.tc_Node.ln_Name);
		Printf(" %4.4ld", ((struct Process*)node)->pr_Task.tc_Node.ln_Pri);
		Printf("  %2.-2s", "WB");
		Printf(" %3.3ld", ((struct Process*)node)->pr_TaskNum);
		Printf(" %5.5s", "Ready");
		Printf(" %6.6ld", (long)((struct Process*)node)->pr_Task.tc_SPUpper - (long)((struct Process*)node)->pr_Task.tc_SPReg);
		Printf(" %6.6ld", (long)((struct Process*)node)->pr_Task.tc_SPUpper - (long)((struct Process*)node)->pr_Task.tc_SPLower);
		Printf("\n");

		node = node->ln_Succ;
		taskCount++;
	}

exit:
	if (list)
		WorkbenchControl(NULL, WBCTRLA_FreeProgramList, list, TAG_DONE);

	return rc;
}
